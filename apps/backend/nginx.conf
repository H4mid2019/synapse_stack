upstream read_backend {
    # Load balance across 2 read instances
    server localhost:6001;
    server localhost:6011;
    keepalive 32;
}

upstream write_backend {
    server localhost:6002;
    keepalive 32;
}

upstream operations_backend {
    server localhost:6003;
    keepalive 32;
}

server {
    listen 5000;
    server_name _;
    
    client_max_body_size 100M;
    
    # CORS headers for all locations
    add_header 'Access-Control-Allow-Origin' '*' always;
    add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
    add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization' always;
    
    # Handle preflight OPTIONS requests
    if ($request_method = 'OPTIONS') {
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization';
        add_header 'Access-Control-Max-Age' 1728000;
        add_header 'Content-Type' 'text/plain charset=UTF-8';
        add_header 'Content-Length' 0;
        return 204;
    }
    
    # Health check endpoint
    location /api/health {
        proxy_pass http://operations_backend;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Read operations (GET /filesystem, GET /filesystem/<id>)
    location ~ ^/api/filesystem/[0-9]+$ {
        if ($request_method = GET) {
            proxy_pass http://read_backend;
        }
        if ($request_method = PUT) {
            proxy_pass http://operations_backend;
        }
        if ($request_method = DELETE) {
            proxy_pass http://operations_backend;
        }
        
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Upload endpoint
    location /api/filesystem/upload {
        proxy_pass http://operations_backend;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_request_buffering off;
    }
    
    # Download endpoint
    location ~ ^/api/filesystem/[0-9]+/download$ {
        proxy_pass http://operations_backend;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_buffering off;
    }
    
    # Base /api/filesystem - route by method
    location /api/filesystem {
        if ($request_method = GET) {
            proxy_pass http://read_backend;
        }
        if ($request_method = POST) {
            proxy_pass http://write_backend;
        }
        
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Test endpoints (if TEST_MODE enabled)
    location /api/test/ {
        proxy_pass http://operations_backend;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}
